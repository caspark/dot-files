#!/usr/bin/env ruby
#
# A script that makes it very easy to create a Jira issue and swap to a branch named after that Jira issue.
# Intended for lowering the friction to fix adhoc problems noticed when Jira is slow and Jira issues are required.
#
# Save to e.g. ~/.local/bin/fixit and chmod +x to make executable, then run it.

require 'yaml'
require 'optparse'
require 'rubygems'
require 'jira-ruby'

JIRA_PROJECT_KEY_REGEX = /^[A-Z]{2,10}$/

module Config
  CONFIG_FILE_PATH = "#{Dir.home}/.fixit.yml"

  begin
    config_file = YAML.load_file(CONFIG_FILE_PATH)
  rescue
    puts "Config file not found at #{CONFIG_FILE_PATH} so created default there.
Edit it to enter in your API tokens and such, then try again."
    defaults = {
      'jira' => {
        'url' => 'https://something.atlassian.net/',
        'username' => 'your@email',
        'api_token' => '__fill_this_in_from_https://id.atlassian.com/manage-profile/security/api-tokens__',
        'default_project_key' => 'FOO',
        'default_issue_type' => 'Task',
      }
    }
    File.write(CONFIG_FILE_PATH, defaults.to_yaml)
    exit 1
  end

  JIRA_URL = config_file.dig('jira', 'url')
  raise "Error in #{CONFIG_FILE_PATH}: invalid Jira URL - make sure there's a trailing slash. E.g. https://statuspage.atlassian.net/" unless /https:\/\/.*\.atlassian\.net\// =~ JIRA_URL

  JIRA_USERNAME = config_file.dig('jira', 'username')
  raise "Error in #{CONFIG_FILE_PATH}: invalid Jira username - make sure it's an email" unless /.+@.+/ =~ JIRA_USERNAME

  JIRA_API_TOKEN = config_file.dig('jira', 'api_token')
  raise "Error in #{CONFIG_FILE_PATH}: invalid Jira API token - should be a sequence of 24 alphanumeric chars" unless /[a-zA-Z0-9]{24}/ =~ JIRA_API_TOKEN

  JIRA_DEFAULT_PROJECT_KEY = config_file.dig('jira', 'default_project_key')
  raise "Error in #{CONFIG_FILE_PATH}: invalid Jira default project key - should match the regex #{JIRA_PROJECT_KEY_REGEX}" unless JIRA_PROJECT_KEY_REGEX =~ JIRA_DEFAULT_PROJECT_KEY

  JIRA_DEFAULT_ISSUE_TYPE_NAME = config_file.dig('jira', 'default_issue_type')
  raise "Error in #{CONFIG_FILE_PATH}: invalid Jira default issue type - must not be empty" if JIRA_DEFAULT_ISSUE_TYPE_NAME.empty?

end

module JIRA
  class Client
    def boards_for_project(projectKey)
      path = "/rest/agile/1.0/board?projectKeyOrId=#{projectKey}"
      response = get(path)
      json = JSON.parse(response.body)
      results = json['values']

      until json['isLast']
        params = { 'startAt' => (json['startAt'] + json['maxResults']).to_s }
        response = get(url_with_query_params(path, params))
        json = JSON.parse(response.body)
        results += json['values']
      end

      results.map do |board|
        self.Board.build(board)
      end
    end

    def move_issue_onto_kanban_board(issue, board)
      post("/rest/agile/1.0/board/#{board.id}/issue", { issues: [issue.id] }.to_json)
    end

    def get_issues_for_board_backlog(board)
      path = "/rest/agile/1.0/board/#{board.id}/backlog"
      response = get(path)
      json = JSON.parse(response.body)
      results = json['issues']

      while (json['startAt'] + json['maxResults']) < json['total']
        startAt = (json['startAt'] + json['maxResults'])
        response = get(path + '?startAt=' + startAt)
        json = JSON.parse(response.body)
        results += json['issues']
      end

      results.map { |issue| self.Issue.build(issue) }
    end
  end
end

class Main
  attr_reader :verbose, :issue_summary

  def run
    parse_args!

    short_summary = issue_summary[0, 60]
    branch_name = "#{jira_issue_key}-#{short_summary}".gsub(/[^a-zA-Z0-9]+/, '-')
    log "Creating new git branch '#{branch_name}' and switching to it"
    `git checkout -b "#{branch_name}"`
  end

  def parse_args!
    banner = "Usage:
fixit.rb [options] short text summary of issue being fixed
OR choose a project with
fixit.rb [options] JIRAKEY short text summary of issue being fixed
"

    OptionParser.new do |opts|
      opts.banner = banner

      opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
        @verbose = v
      end

      opts.on("-h", "--help", "Prints this help") do
        puts opts
        exit
      end
    end.parse!

    if JIRA_PROJECT_KEY_REGEX =~ ARGV[0]
      @jira_project_key = ARGV.slice!(0)
      debug "Using specified jira project key of #{@jira_project_key}"
    end

    @issue_summary = ARGV[0..].join(" ")
    if @issue_summary.strip.empty?
      debug "Missing summary"
      puts banner
      exit 1
    else
      debug "Parsed summary of '#{issue_summary}'"
    end
  end

  def jira_client
    @jira_client ||= begin
                       debug "Creating Jira client for #{Config::JIRA_USERNAME} @ #{Config::JIRA_URL}"
                       JIRA::Client.new({
                                          username: Config::JIRA_USERNAME,
                                          password: Config::JIRA_API_TOKEN,
                                          site: Config::JIRA_URL,
                                          context_path: '',
                                          auth_type: :basic,
                                          read_timeout: 120
                                        })
                     end
  end

  def jira_project_key
    @jira_project_key ||= begin
                            debug "No Jira project key set so falling back to default of #{Config::JIRA_DEFAULT_PROJECT_KEY}"
                            Config::JIRA_DEFAULT_PROJECT_KEY
                          end
  end

  def jira_project_id
    @jira_project_id ||= begin
                           debug "Finding Jira project ID for #{jira_project_key}"
                           projects = jira_client.Project.all
                           project = projects.find { |p| p.key == jira_project_key }
                           debug "Found matching Jira project with name #{project.name}; will use project ID of #{project.id}"
                           project.id
                         end
  end

  def jira_issue_type_name
    @jira_issue_type_name ||= begin
                                debug "No Jira issue type name set so falling back to default of #{Config::JIRA_DEFAULT_ISSUE_TYPE_NAME}"
                                Config::JIRA_DEFAULT_ISSUE_TYPE_NAME
                              end
  end

  def jira_issue_type_id
    @jira_issue_type_id ||= begin
                              debug "Finding Jira issue type ID for #{jira_issue_type_name} in project #{jira_project_id}"
                              issue_types = jira_client.Issuetype.all
                              debug "Found #{issue_types.count} issue types"

                              debug "Filtering out issue types whose names are not #{jira_issue_type_name}"
                              issue_types = issue_types.filter do |issue_type|
                                issue_type.name == jira_issue_type_name
                              end
                              debug "#{issue_types.count} issue types remain"

                              debug "Finding issue types scoped to the project"
                              project_issue_types = issue_types.filter do |issue_type|
                                issue_type.respond_to?(:scope) && issue_type.scope['type'] == 'PROJECT' && issue_type.scope.dig('project', 'id') == jira_project_id
                              end
                              debug "#{project_issue_types.count} matching issue types scoped to project"

                              issue_type_pool = if project_issue_types.count > 0
                                                  project_issue_types
                                                else
                                                  debug "No issue types scoped to the project found, so falling back to global issue types"
                                                  global_issue_types = issue_types.filter do |issue_type|
                                                    !issue_type.respond_to?(:scope)
                                                  end
                                                  debug "#{global_issue_types.count} matching global issue types"
                                                  global_issue_types
                                                end

                              if issue_type_pool.size == 1
                                debug "Locking in single remaining issue type with id of #{issue_type_pool[0].id}"
                                issue_type_pool[0].id
                              else
                                raise "Failed to find issue type matching name of #{jira_issue_type_name} for project #{jira_project_key}"
                              end
                            end
  end

  def jira_user
    @jira_user ||= begin
                     debug "Fetching jira user for #{Config::JIRA_USERNAME}"
                     jira_user = jira_client.User.myself
                     debug "Found jira user of #{jira_user} for query #{Config::JIRA_USERNAME}"
                     jira_user
                   end
  end

  def jira_board
    @jira_board ||= begin
                      debug "Fetching jira boards for #{jira_project_key}"
                      boards = jira_client.boards_for_project(jira_project_key)
                      debug "Found boards of #{boards}"
                      if boards.size == 0
                        raise StandardError, "No jira board found for project #{jira_project_key}"
                      elsif boards.size > 1
                        raise StandardError, "Multiple jira boards found for project #{jira_project_key}, not sure which to use:\n#{boards.join("\n")}"
                      end
                      boards.first
                    end
  end

  def jira_issue_key
    @jira_issue_key ||= begin
                          log "Creating issue in #{jira_project_key} of '#{issue_summary}'"
                          issue = jira_client.Issue.build
                          payload = { "fields" =>
                                        {
                                          "issuetype" => { "id" => jira_issue_type_id },
                                          "project" => { "id" => jira_project_id },
                                          "summary" => issue_summary,
                                          "assignee" => jira_user,
                                        }
                          }
                          debug "About to save issue with payload of #{payload}"
                          issue.save(payload)
                          debug "Saving done, fetching issue again to get key..."
                          issue.fetch
                          issue_url = "#{Config::JIRA_URL}browse/#{issue.key}"
                          debug "Fetched issue #{issue}, key is #{issue.key} and URL will be #{issue_url}"

                          debug "Moving #{issue.key} onto board #{jira_board.name}..."
                          issue_location = move_issue_onto_board_and_return_location(issue, jira_board)
                          debug "Done with trying to move issue onto board"

                          log "Created #{issue_url} #{issue_location}"
                          issue.key
                        end
  end

  # Does its level best to move the issue onto the board proper.
  # Yes, it's crazy that it takes this much effort.
  def move_issue_onto_board_and_return_location(issue, board)
    debug "Fetching active sprints for board #{board.name}"
    active_sprints = board.sprints(state: :active)
    debug "Found active sprints of #{active_sprints}"
    if active_sprints.size == 0
      debug "Aborting issue move - no active sprints found"
      "(not on board - no active sprints found for board '#{board.name}')"
    else
      if active_sprints.size > 1
        sprints_desc = active_sprints.map { |s| "'#{s.name}'" }.join(", ")
        log "WARNING: #{active_sprints.size} active sprints found for board '#{board.name}' (#{sprints_desc}) - the first sprint will be used!"
      end
      sprint = active_sprints.first
      debug "Locked in active sprint of #{sprint.name} & moving issue into it"
      sprint.add_issue(issue)
      debug "Issue move into sprint succeeded"

      "in Scrum sprint '#{sprint.name}' on board '#{board.name}'"
    end
  rescue JIRA::HTTPError => e
    debug "Failed moving issue into sprint; response body is #{e.response.body}"
    error_body = JSON.parse(e.response.body)
    if error_body.dig('errorMessages').any? { |msg| msg == "The board does not support sprints" }
      debug "Board doesn't support sprints, so attempting to move issue onto Kanban board"
      begin
        jira_client.move_issue_onto_kanban_board(issue, board)
        "on Kanban board '#{jira_board.name}'"
      rescue JIRA::HTTPError => e
        debug "Failed moving issue onto Kanban board; response body is #{e.response.body}"

        error_body = JSON.parse(e.response.body)
        if error_body.dig('errorMessages').any? { |msg| msg.start_with? "Unable to transition the issues to" }
          debug "Checking if issue is already on the board"
          debug "Fetching board issues"
          board_issues = board.issues
          debug "Fetched #{board_issues.size} board issues"
          if board_issues.none? { |i| i.key == issue.key }
            debug "Issue is not included in issues in the board, so giving up"
            "not on Kanban board (issue seems to be excluded from board)"
          else
            debug "issue is on the board, but not clear whether it's on the backlog, so fetching backlog issues"
            # absurdly, there doesn't seem to be a way to find issues not in the backlog, so we do this hack
            backlog_issues = jira_client.get_issues_for_board_backlog(board)
            debug "Fetched #{board_issues.size} backlog issues"
            if backlog_issues.none? { |i| i.key == issue.key }
              debug "Issue not found in backlog, so assuming issue must already be on the board"
              "on Kanban board '#{jira_board.name}'"
            else
              raise
            end
          end
        else
          raise
        end
      end
    else
      raise
    end
  end

  def log(msg)
    puts msg
  end

  def debug(msg)
    puts "DEBUG: #{msg}" if verbose
  end
end

Main.new.run
